<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">


    <!--开启注解-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--定义注解扫描包-->
    <context:component-scan base-package="com.os"/>

    <!--aop配置，激活自动代理功能-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--静态文件访问配置，让默认消息分发器去处理静态资源文件，这样就不需要单独配置静态资源访问路径-->
    <mvc:default-servlet-handler/>

    <!--定义jsp视图解析器-->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--定义文件上传解析器-->
    <bean id="multiPartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="999999999"/>
        <property name="maxInMemorySize" value="666666"/>
    </bean>

    <!--数据源配置-->
    <context:property-placeholder location="classpath*:jdbc.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--初始化连接大小-->
        <property name="initialSize" value="5"/>
        <!--连接池最大使用数量-->
        <property name="maxActive" value="30"/>
        <!--连接池最小空闲-->
        <property name="minIdle" value="2"/>
        <!--连接池最大等待时间-->
        <property name="maxWait" value="30000"/>
        <!--配置拦截的filters，去掉之后监控页面的sql将无法统计-->
        <property name="filters" value="stat"/>
        <!--sql监控语句-->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <!--sql监控-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--慢sql记录，缺省值为3000，也就是3秒-->
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
        <!--sql合并配置-->
        <property name="mergeSql" value="true"/>
    </bean>

    <!--注入spring的jdbcTemplate，这是一种最简单的jdbc组件，可以通过？或者sql拼接的方式操作数据库-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--注入 spring 的 namedParameterJdbcTemplate，普通的pst方式-->
    <bean id="namejdbcTemp" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"></constructor-arg>  <!-- dbcp是连接池组件（org.apache.commons.dbcp2.BasicDataSource）的bean -->
    </bean>

    <!--配置事务管理组件-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />  <!-- dbcp是连接池组件（org.apache.commons.dbcp2.BasicDataSource）的bean -->
    </bean>

    <!-- 采用注解方式：有源码的情况下，将注解加在方法上 -->
    <!-- 开启事务注解标记@Transactional，当调用带@Transactional标记的方法时，将txManager的事务管理功能切入进去 -->
    <tx:annotation-driven transaction-manager="txManager" />
    <!-- 在需要事务管理的方法上加上@Transactional注解即可 -->

</beans>